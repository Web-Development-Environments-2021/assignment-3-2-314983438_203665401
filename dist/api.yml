openapi: 3.0.0
info:
  title: 'League Mangement API'
  description: league managment api
  contact:
    email: ronenara@post.bgu.ac.il
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: "1.0.0"
servers:
  # Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/Ronen96/Register/1.0.0
- url: https://virtserver.swaggerhub.com/ben-gurion8/Register/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
    
paths:
  /Register:
    post:
      tags:
      - auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
        "409":
          description: Username already exist
          
  /Login:
    post:
      tags:
      - auth
      summary: A signed up user logging in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        "201":
          description: login succeeded
        "400":
          description: wrong input parameters
        "401":
          description: Username or Password incorrect
          
  /Logout:
    post:
      tags:
      - auth
      summary: A signed up user logging out
      responses:
        "200":
          description: User logged out
          
  /player/SearchPlayerByName/{playerName}:
    get:
      tags:
      - players
      summary: Search Player By Name
      parameters: 
        - in: path
          name: playerName
          description: player info 
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player'
      responses:
        "200":
          description: data of the specific player name
        "404":
          description: Player not found
          
  /player/SearchPlayerById/{playerId}:
    get:
      tags:
      - players
      summary: Search Player By Name
      parameters: 
        - in: path
          name: playerId
          description: player info 
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player'
      responses:
        "200":
          description: data of the specific player Id
        "404":
          description: Player not found
          
  /team/SearchTeamById/{teamId}:
    get:
      tags:
      - teams
      summary: show team's page
      parameters:
        - in: path
          name: teamId
          description: team info
          required: true
          content:
            application/json:
              schema:
                properties:
                  team:
                    $ref: '#/components/schemas/team'
                  past-games:
                    type: array
                    items:
                      $ref: '#/components/schemas/game'
                  future-games:
                    type: array
                    items:
                      $ref: '#/components/schemas/game'
      responses:
        "200":
          description: data of the specific team Id
        "404":
          description: Team  not found
          
  /team/SearchTeamByName/{teamName}:
    get:
      tags:
      - teams
      summary: show team's page
      parameters:
        - in: path
          name: teamName
          description: team info
          required: true
          content:
            application/json:
              schema:
                properties:
                  team:
                    $ref: '#/components/schemas/team'
                  past-games:
                    type: array
                    items:
                      $ref: '#/components/schemas/game'
                  future-games:
                    type: array
                    items:
                      $ref: '#/components/schemas/game'
      responses:
        "200":
          description: data of the specific team name
        "404":
          description: Team  not found
          
  /favoriteGames:
    post:
      tags:
      - users
      summary: add game to list of favorites if user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        "201":
          description: The game successfully saved as favorite
        "409":
          description: game already saved as favorite

    get:
      tags:
      - users
      summary: get all favorite games of user
      parameters:
      - name: title
        in: query
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        "200":
          description: show all favorite games

          
  /currentfixture:
    get:
      summary: games of current fixture
      parameters:
      - name: title
        in: query
        required: true
        description: games of current fixture
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/game'

      responses:
        '200':
          description: games of current fixture
        '401':
          description: Could not fetch information
          
          
components:
  schemas:
    UserRegister:
      type: object
      description: Model containing user info
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: username contains between 3 to 8 letters only
        firstname:
          type: string
          description: user's first name
          example: Bob
        lastname:
          type: string
          description: user's last name
          example: Cohen
        country:
          type: string
          description: user's country
          example: greece
        password:
          type: string
          minLength: 5
          maxLength: 10
          format: password
          description: password contains between 5 to 10 chars, at least one of them is a number and a special char
          example: hantrish!9
        email:
          type: string
          format: email
          description: user's email
          example: bibiKing@walla.com
        image-url:
          type: string
          format: URL
          description: URL for the user's logo
          example: https://cloudinary.com/bibi
          
    UserLogin:
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: username contains between 3 to 8 letters only
        password:
          type: string
          minLength: 5
          maxLength: 10
          format: password
          
    team:
      type: object
      description: team info
      properties:
        players:
          type: array
          items:
            $ref: '#/components/schemas/player'
        name:
          type: string
          example: Chelsea FC
        favorite:
          type: boolean
          description: team is in list of favorite teams by user
          example: 'True'
          
    player:
      type: object
      description: player info
      properties:
        common name:
          type: string
          description: player's name
          example: 'Didier Drogba'
        nationality:
          type: string
          description: player's nationality
          example: 'Cote Dlvoire'
        date of birth:
          type: string
          format: date-time 
          description: player's date of birth
          example: '1992-05-26T23:20:50.52Z'
        country of birth:
          type: string
          description: player's country of birth
          example: 'Cote Dlvoire'
        height:
          type: number
          description: player's height
          example: '1.85'
        weight:
          type: number
          description: player's weight
          example: '75'
        favorite:
          type: boolean
          description: player is in list of favorite players by user
          example: 'True'
          
    game:
      type: object
      description: game info
      properties:
        date:
          type: string
          format: date-time  
          description: game's full date
          example: '1992-05-26T23:20:50.52Z'
        home team:
          $ref: '#/components/schemas/team'
        away team:
          $ref: '#/components/schemas/team'
        home score:
          type: integer
          description: score of home team
          example: '4'
        away score:
          type: integer
          description: score of away team
          example: '0'
        stadium:
          type: string
          description: game's stadium
          example: 'Stamford Bridge'
        favorite:
          type: boolean
          description: game is in list of favorite games by user
          example: 'True'